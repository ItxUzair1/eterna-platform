generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"  // Optional: explicit output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================
// ===============  CORE ENTITIES  ==============================
// =============================================================

model Tenant {
  id        Int      @id @default(autoincrement())
  name      String
  plan      String   @default("Individual")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users                   User[]
  teams                   Team[]
  roles                   Role[]
  permissions             Permission[]
  files                   File[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  auditLogs               AuditLog[]
  crmLeads                Lead[]
  leadStatuses            LeadStatus[]
  leadFiles               LeadFile[]
  boards                  Board[]
  mailAccounts            MailAccount[]
  mailMessages            MailMessage[]
  mailTemplates           MailTemplate[]
  transactions            Transaction[]
  todoCategories          TodoCategory[]
  todos                   Todo[]
  convertJobs             ConvertJob[]
  subscriptions           Subscription[]
  invoices                Invoice[]
  storageUsage            StorageUsage?

  @@map("tenants")
}

// =============================================================
// ===============  USERS, ROLES, PERMISSIONS ==================
// =============================================================

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  tenantId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users  User[]

  @@index([tenantId])
  @@unique([tenantId, name]) // <-- make role names unique per-tenant
  @@map("roles")
}


model User {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  email        String   @unique
  username     String   @unique
  passwordHash String
  phone        String?
  jobTitle     String?
  photo        String?
  twofaEnabled Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)

  teams                   TeamMember[]
  files                   File[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  auditLogs               AuditLog[]
  leads                   Lead[]
  comments                CardComment[]
  todos                   Todo[]
  transactions            Transaction[]
  convertJobs             ConvertJob[]
  assignedCards           Card[]                   @relation("CardAssignee")
  createdCards            Card[]                   @relation("CardCreator")
  createdBoards           Board[]
  userPermissions         UserPermission[]

  @@index([tenantId])
  @@index([email])
  @@map("users")
}

model Permission {
  id       Int    @id @default(autoincrement())
  tenantId Int
  appKey   String
  scopeKey String

  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userPerms UserPermission[]

  @@unique([tenantId, appKey, scopeKey])
  @@index([tenantId])
  @@map("permissions")
}

model UserPermission {
  id           Int     @id @default(autoincrement())
  userId       Int
  permissionId Int?
  appKey       String
  scopeKey     String
  enabled      Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission? @relation(fields: [permissionId], references: [id], onDelete: SetNull)

  @@unique([userId, appKey, scopeKey])
  @@index([userId])
  @@map("user_permissions")
}

// =============================================================
// ===============  TEAMS & GROUPS =============================
// =============================================================

model Team {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  members TeamMember[]
  boards  Board[]

  @@index([tenantId])
  @@map("teams")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  role      String   @default("Member")
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

// =============================================================
// ===============  FILES, NOTIFICATIONS, AUDIT ================
// =============================================================

model File {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  ownerId   Int
  path      String
  mime      String
  size      Int
  checksum  String?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner  User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  leadFiles         LeadFile[]
  cardFiles         CardFile[]
  mailAttachments   MailAttachment[]
  transactionFiles  TransactionFile[]
  convertSourceJobs ConvertJobItem[]  @relation("SourceFile")
  convertOutputJobs ConvertJobItem[]  @relation("OutputFile")

  @@index([tenantId, ownerId])
  @@map("files")
}

model Notification {
  id        Int       @id @default(autoincrement())
  tenantId  Int
  userId    Int
  type      String
  channel   String
  payload   Json
  readAt    DateTime?
  createdAt DateTime  @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId])
  @@index([readAt])
  @@map("notifications")
}

model NotificationPreference {
  id        Int     @id @default(autoincrement())
  tenantId  Int
  userId    Int
  eventType String
  channel   String
  enabled   Boolean @default(true)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventType, channel])
  @@index([userId])
  @@map("notification_preferences")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  actorId    Int
  action     String
  targetType String
  targetId   Int?
  diff       Json?
  createdAt  DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor  User   @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@index([tenantId, actorId])
  @@index([targetType, targetId])
  @@map("audit_logs")
}

// =============================================================
// ===============  CRM MODULE =================================
// =============================================================

model Lead {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  ownerId   Int?
  name      String
  company   String?
  email     String?
  phone     String?
  statusId  Int?
  tags      String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant       Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner        User?             @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  status       LeadStatus?       @relation(fields: [statusId], references: [id], onDelete: SetNull)
  appointments LeadAppointment[]
  files        LeadFile[]

  @@index([tenantId, ownerId])
  @@index([statusId])
  @@index([email])
  @@map("leads")
}

model LeadStatus {
  id        Int     @id @default(autoincrement())
  tenantId  Int
  value     String
  color     String?
  sortOrder Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leads  Lead[]

  @@unique([tenantId, value])
  @@index([tenantId])
  @@map("lead_statuses")
}

model LeadAppointment {
  id        Int       @id @default(autoincrement())
  leadId    Int
  startsAt  DateTime
  endsAt    DateTime?
  location  String?
  notes     String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@map("lead_appointments")
}

model LeadFile {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  leadId    Int
  fileId    Int
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([leadId, fileId])
  @@index([leadId])
  @@map("lead_files")
}

// =============================================================
// ===============  KANBAN =====================================
// =============================================================

model Board {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  title     String
  teamId    Int?
  createdBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  team    Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  creator User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  columns Column[]
  cards   Card[]

  @@index([tenantId, teamId])
  @@map("boards")
}

model Column {
  id        Int      @id @default(autoincrement())
  boardId   Int
  title     String
  sortIndex Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]

  @@index([boardId])
  @@map("columns")
}

model Card {
  id           Int       @id @default(autoincrement())
  boardId      Int
  columnId     Int
  parentCardId Int?
  title        String
  description  String?   @db.Text
  deadlineDate DateTime?
  assigneeId   Int?
  sortIndex    Int
  createdBy    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  board      Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  column     Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  parentCard Card?  @relation("SubCards", fields: [parentCardId], references: [id], onDelete: Cascade)
  subCards   Card[] @relation("SubCards")

  assignee User? @relation("CardAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creator  User  @relation("CardCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  comments    CardComment[]
  attachments CardFile[]

  @@index([boardId, columnId])
  @@index([assigneeId])
  @@index([parentCardId])
  @@map("cards")
}

model CardFile {
  id        Int      @id @default(autoincrement())
  cardId    Int
  fileId    Int
  createdAt DateTime @default(now())

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([cardId, fileId])
  @@index([cardId])
  @@map("card_files")
}

model CardComment {
  id        Int      @id @default(autoincrement())
  cardId    Int
  authorId  Int
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@map("card_comments")
}

// =============================================================
// ===============  EMAIL ======================================
// =============================================================

model MailAccount {
  id              Int      @id @default(autoincrement())
  tenantId        Int
  type            String
  host            String
  port            Int
  username        String
  encryptedSecret String
  scope           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant   Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages MailMessage[]

  @@index([tenantId])
  @@map("mail_accounts")
}

model MailMessage {
  id            Int       @id @default(autoincrement())
  tenantId      Int
  mailAccountId Int
  threadId      Int?
  folder        String
  from          String
  to            String
  cc            String?
  subject       String
  bodyHtml      String?   @db.Text
  bodyText      String?   @db.Text
  sentAt        DateTime?
  receivedAt    DateTime?
  createdAt     DateTime  @default(now())

  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mailAccount MailAccount      @relation(fields: [mailAccountId], references: [id], onDelete: Cascade)
  attachments MailAttachment[]

  @@index([tenantId, mailAccountId])
  @@index([threadId])
  @@map("mail_messages")
}

model MailAttachment {
  id        Int      @id @default(autoincrement())
  messageId Int
  fileId    Int
  createdAt DateTime @default(now())

  message MailMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file    File        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([messageId, fileId])
  @@index([messageId])
  @@map("mail_attachments")
}

model MailTemplate {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  name      String
  subject   String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("mail_templates")
}

// =============================================================
// ===============  MONEY MANAGEMENT ===========================
// =============================================================

model Transaction {
  id            Int      @id @default(autoincrement())
  tenantId      Int
  invoiceNo     String   @unique
  date          DateTime @default(now())
  type          String
  category      String
  description   String?
  amount        Decimal  @db.Decimal(15, 2)
  currency      String   @default("USD")
  paymentMethod String
  comment       String?  @db.Text
  createdBy     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant  Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  files   TransactionFile[]

  @@index([tenantId, createdBy])
  @@index([date])
  @@index([type])
  @@map("transactions")
}

model TransactionFile {
  id            Int      @id @default(autoincrement())
  transactionId Int
  fileId        Int
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  file        File        @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([transactionId, fileId])
  @@index([transactionId])
  @@map("transaction_files")
}

// =============================================================
// ===============  TO-DOs =====================================
// =============================================================

model TodoCategory {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  title     String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  todos  Todo[]

  @@index([tenantId])
  @@map("todo_categories")
}

model Todo {
  id           Int       @id @default(autoincrement())
  tenantId     Int
  userId       Int
  categoryId   Int?
  title        String
  description  String?
  status       String    @default("New")
  priority     String?   @default("Medium")
  assignedDate DateTime  @default(now())
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  tenant   Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category TodoCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([tenantId, userId])
  @@index([categoryId])
  @@index([status])
  @@map("todos")
}


// =============================================================
// ===============  IMAGE CONVERTER ============================
// =============================================================

model ConvertJob {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  userId      Int
  status      String     @default("PENDING")
  createdAt   DateTime   @default(now())
  completedAt DateTime?

  tenant Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  ConvertJobItem[]

  @@index([tenantId, userId])
  @@index([status])
  @@map("convert_jobs")
}

model ConvertJobItem {
  id           Int      @id @default(autoincrement())
  jobId        Int
  sourceFileId Int
  targetFormat String
  status       String    @default("PENDING")
  outputFileId Int?
  error        String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  job        ConvertJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  sourceFile File       @relation("SourceFile", fields: [sourceFileId], references: [id], onDelete: Cascade)
  outputFile File?      @relation("OutputFile", fields: [outputFileId], references: [id], onDelete: SetNull)

  @@index([jobId])
  @@map("convert_job_items")
}

// =============================================================
// ===============  BILLING & STORAGE ==========================
// =============================================================

model Subscription {
  id               Int       @id @default(autoincrement())
  tenantId         Int
  plan             String
  status           String
  stripeCustomerId String?   @unique
  stripeSubId      String?   @unique
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@index([tenantId])
  @@index([status])
  @@map("subscriptions")
}

model Invoice {
  id              Int       @id @default(autoincrement())
  tenantId        Int
  subscriptionId  Int?
  stripeInvoiceId String?   @unique
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  status          String
  paidAt          DateTime?
  dueDate         DateTime?
  invoiceUrl      String?
  createdAt       DateTime  @default(now())

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([status])
  @@map("invoices")
}

model StorageUsage {
  tenantId           Int      @id
  usedBytes          BigInt   @default(0)
  lastRecalculatedAt DateTime @default(now())
  updatedAt          DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("storage_usage")
}
