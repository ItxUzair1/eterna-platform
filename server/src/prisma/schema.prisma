// ---------- PRISMA CONFIGURATION ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================
// ===============  CORE ENTITIES  ==============================
// =============================================================

model Tenant {
  id        Int      @id @default(autoincrement())
  name      String
  plan      String   @default("Individual")
  createdAt DateTime @default(now())

  users          User[]
  teams          Team[]
  permissions    Permission[]
  files          File[]
  notifications  Notification[]
  auditLogs      AuditLog[]
  crmLeads       Lead[]
  leadStatuses   LeadStatus[]
  leadFiles      LeadFile[]
  boards         Board[]
  mailAccounts   MailAccount[]
  mailMessages   MailMessage[]
  mailTemplates  MailTemplate[]
  transactions   Transaction[]
  todoCategories TodoCategory[]
  todos          Todo[]
  convertJobs    ConvertJob[]
  subscriptions  Subscription[]
  storageUsage   StorageUsage?
}

// =============================================================
// ===============  USERS, ROLES, PERMISSIONS ==================
// =============================================================

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model User {
  id           Int      @id @default(autoincrement())
  tenantId     Int
  email        String   @unique
  username     String   @unique
  passwordHash String
  phone        String?
  jobTitle     String?
  photo        String?
  twofaEnabled Boolean  @default(false)
  createdAt    DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id])

  teams         TeamMember[]
  files         File[]
  notifications Notification[]
  auditLogs     AuditLog[]
  leads         Lead[]
  comments      CardComment[]
  todos         Todo[]
  transactions  Transaction[]
  convertJobs   ConvertJob[]

  assignedCards Card[] @relation("CardAssignee")
  createdCards  Card[] @relation("CardCreator")

  userPermissions UserPermission[]
  createdBoards   Board[]
}

// -------------------------------------------------------------

model Permission {
  id       Int    @id @default(autoincrement())
  tenantId Int
  appKey   String
  scopeKey String

  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  userPerms UserPermission[]
}

model UserPermission {
  id           Int     @id @default(autoincrement())
  userId       Int
  permissionId Int?
  appKey       String
  scopeKey     String
  enabled      Boolean @default(false)

  user       User        @relation(fields: [userId], references: [id])
  permission Permission? @relation(fields: [permissionId], references: [id])
}

// =============================================================
// ===============  TEAMS & GROUPS =============================
// =============================================================

model Team {
  id       Int    @id @default(autoincrement())
  tenantId Int
  name     String

  tenant  Tenant       @relation(fields: [tenantId], references: [id])
  members TeamMember[]
  boards  Board[]
}

model TeamMember {
  id     Int    @id @default(autoincrement())
  teamId Int
  userId Int
  role   String @default("Member")

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

// =============================================================
// ===============  FILES, NOTIFICATIONS, AUDIT ================
// =============================================================

model File {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  ownerId   Int
  path      String
  mime      String
  size      Int
  checksum  String?
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  owner  User   @relation(fields: [ownerId], references: [id])

  leadFiles         LeadFile[]
  cardFiles         CardFile[]
  mailAttachments   MailAttachment[]
  transactionFiles  TransactionFile[]
  convertSourceJobs ConvertJobItem[]  @relation("SourceFile")
  convertOutputJobs ConvertJobItem[]  @relation("OutputFile")
}

model Notification {
  id       Int       @id @default(autoincrement())
  tenantId Int
  userId   Int
  type     String
  channel  String
  payload  Json
  readAt   DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  tenantId   Int
  actorId    Int
  action     String
  targetType String
  targetId   Int?
  diff       Json?
  createdAt  DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  actor  User   @relation(fields: [actorId], references: [id])
}

// =============================================================
// ===============  CRM MODULE =================================
// =============================================================

model Lead {
  id        Int      @id @default(autoincrement())
  tenantId  Int
  ownerId   Int?
  name      String
  company   String?
  email     String?
  phone     String?
  status    String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant       Tenant            @relation(fields: [tenantId], references: [id])
  owner        User?             @relation(fields: [ownerId], references: [id])
  appointments LeadAppointment[]
  files        LeadFile[]
}

model LeadStatus {
  id       Int    @id @default(autoincrement())
  tenantId Int
  value    String

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model LeadAppointment {
  id       Int       @id @default(autoincrement())
  leadId   Int
  startsAt DateTime
  endsAt   DateTime?
  location String?
  notes    String?

  lead Lead @relation(fields: [leadId], references: [id])
}

model LeadFile {
  id       Int @id @default(autoincrement())
  tenantId Int
  leadId   Int
  fileId   Int

  tenant Tenant @relation(fields: [tenantId], references: [id])
  lead   Lead   @relation(fields: [leadId], references: [id])
  file   File   @relation(fields: [fileId], references: [id])
}

// =============================================================
// ===============  KANBAN =====================================
// =============================================================

model Board {
  id        Int    @id @default(autoincrement())
  tenantId  Int
  title     String
  teamId    Int?
  createdBy Int

  tenant  Tenant   @relation(fields: [tenantId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])
  creator User     @relation(fields: [createdBy], references: [id])
  columns Column[]
  cards   Card[]
}

model Column {
  id        Int    @id @default(autoincrement())
  boardId   Int
  title     String
  sortIndex Int

  board Board  @relation(fields: [boardId], references: [id])
  cards Card[]
}

model Card {
  id           Int       @id @default(autoincrement())
  boardId      Int
  columnId     Int
  parentCardId Int?
  title        String
  description  String?
  deadlineDate DateTime?
  assigneeId   Int?
  sortIndex    Int
  createdBy    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  board      Board  @relation(fields: [boardId], references: [id])
  column     Column @relation(fields: [columnId], references: [id])
  parentCard Card?  @relation("SubCards", fields: [parentCardId], references: [id])
  subCards   Card[] @relation("SubCards")

  assignee User? @relation("CardAssignee", fields: [assigneeId], references: [id])
  creator  User  @relation("CardCreator", fields: [createdBy], references: [id])

  comments    CardComment[]
  attachments CardFile[]
}

model CardFile {
  id     Int @id @default(autoincrement())
  cardId Int
  fileId Int

  card Card @relation(fields: [cardId], references: [id])
  file File @relation(fields: [fileId], references: [id])
}

model CardComment {
  id        Int      @id @default(autoincrement())
  cardId    Int
  authorId  Int
  body      String
  createdAt DateTime @default(now())

  card   Card @relation(fields: [cardId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

// =============================================================
// ===============  EMAIL ======================================
// =============================================================

model MailAccount {
  id              Int    @id @default(autoincrement())
  tenantId        Int
  type            String
  host            String
  port            Int
  username        String
  encryptedSecret String
  scope           String

  tenant   Tenant        @relation(fields: [tenantId], references: [id])
  messages MailMessage[]
}

model MailMessage {
  id            Int       @id @default(autoincrement())
  tenantId      Int
  mailAccountId Int
  threadId      Int?
  folder        String
  from          String
  to            String
  cc            String?
  subject       String
  bodyHtml      String?
  bodyText      String?
  sentAt        DateTime?
  receivedAt    DateTime?

  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  mailAccount MailAccount      @relation(fields: [mailAccountId], references: [id])
  attachments MailAttachment[]
}

model MailAttachment {
  id        Int @id @default(autoincrement())
  messageId Int
  fileId    Int

  message MailMessage @relation(fields: [messageId], references: [id])
  file    File        @relation(fields: [fileId], references: [id])
}

model MailTemplate {
  id       Int    @id @default(autoincrement())
  tenantId Int
  name     String
  subject  String
  body     String

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

// =============================================================
// ===============  MONEY MANAGEMENT ===========================
// =============================================================

model Transaction {
  id            Int      @id @default(autoincrement())
  tenantId      Int
  invoiceNo     String
  date          DateTime @default(now())
  type          String
  category      String
  description   String?
  amountDecimal Decimal
  currency      String
  paymentMethod String
  comment       String?
  createdBy     Int

  tenant  Tenant            @relation(fields: [tenantId], references: [id])
  creator User              @relation(fields: [createdBy], references: [id])
  files   TransactionFile[]
}

model TransactionFile {
  id            Int @id @default(autoincrement())
  transactionId Int
  fileId        Int

  transaction Transaction @relation(fields: [transactionId], references: [id])
  file        File        @relation(fields: [fileId], references: [id])
}

// =============================================================
// ===============  TO-DOs =====================================
// =============================================================

model TodoCategory {
  id       Int    @id @default(autoincrement())
  tenantId Int
  title    String
  color    String

  tenant Tenant @relation(fields: [tenantId], references: [id])
  todos  Todo[]
}

model Todo {
  id         Int       @id @default(autoincrement())
  tenantId   Int
  categoryId Int
  title      String
  status     String
  dueDate    DateTime?
  notes      String?
  createdBy  Int
  createdAt  DateTime  @default(now())

  tenant   Tenant       @relation(fields: [tenantId], references: [id])
  category TodoCategory @relation(fields: [categoryId], references: [id])
  creator  User         @relation(fields: [createdBy], references: [id])
}

// =============================================================
// ===============  IMAGE CONVERTER ============================
// =============================================================

model ConvertJob {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  userId      Int
  status      String
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  tenant Tenant           @relation(fields: [tenantId], references: [id])
  user   User             @relation(fields: [userId], references: [id])
  items  ConvertJobItem[]
}

model ConvertJobItem {
  id           Int     @id @default(autoincrement())
  jobId        Int
  sourceFileId Int
  targetFormat String
  status       String
  outputFileId Int?
  error        String?

  job        ConvertJob @relation(fields: [jobId], references: [id])
  sourceFile File       @relation("SourceFile", fields: [sourceFileId], references: [id])
  outputFile File?      @relation("OutputFile", fields: [outputFileId], references: [id])
}

// =============================================================
// ===============  BILLING & STORAGE ==========================
// =============================================================

model Subscription {
  id               Int       @id @default(autoincrement())
  tenantId         Int
  plan             String
  status           String
  stripeCustomerId String?
  stripeSubId      String?
  currentPeriodEnd DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model StorageUsage {
  tenantId           Int      @id
  usedBytes          BigInt   @default(0)
  lastRecalculatedAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
}
